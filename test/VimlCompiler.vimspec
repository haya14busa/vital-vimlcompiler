Describe VimlCompiler

  Before all
    let s:V = vital#of('vital')
    let s:VimlParser = s:V.import('Vim.VimlParser').import()
    let s:VimlCompiler = s:V.import('Vim.VimlCompiler').import()

    function! s:parse(expr) abort
      let r = s:VimlParser.StringReader.new(a:expr)
      let ep = s:VimlParser.ExprParser.new(r)
      return ep.parse()
    endfunction

    function! s:compile(node) abort
      let c = s:VimlCompiler.new()
      return c.compile(a:node)
    endfunction

    function! Recompile(expr) abort
      return s:compile(s:parse(a:expr))
    endfunction

  End

  Describe .compile_ternary
    It compile ternary
      Assert Equals(Recompile('cond ? true : false'), '(cond ? true : false)')
    End

    It compile nested ternary
      Assert Equals(Recompile('cond ? true : (cond2 ? true2 : false2)'), '(cond ? true : (cond2 ? true2 : false2))')
    End
  End

  Describe .compile_or
    It compile or
      Assert Equals(Recompile('true || false'), '(true || false)')
    End

    It eval or expression
      Assert Equals(eval(Recompile('0 || 0')), 0)
      Assert Equals(eval(Recompile('0 || 1')), 1)
      Assert Equals(eval(Recompile('1 || 0')), 1)
      Assert Equals(eval(Recompile('1 || 1')), 1)
    End
  End

  Describe .compile_number
    It compile number
      for i in range(0, 100)
        Assert Equals(Recompile(string(i)), string(i))
      endfor
    End
  End

End
