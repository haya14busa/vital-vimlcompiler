Describe VimlCompiler

  Before all
    let s:V = vital#of('vital')
    let s:VimlParser = s:V.import('Vim.VimlParser').import()
    let s:VimlCompiler = s:V.import('Vim.VimlCompiler').import()

    function! s:parse(expr) abort
      let r = s:VimlParser.StringReader.new(a:expr)
      let ep = s:VimlParser.ExprParser.new(r)
      return ep.parse()
    endfunction

    function! s:compile(node) abort
      let c = s:VimlCompiler.new()
      return c.compile(a:node)
    endfunction

    function! Recompile(expr) abort
      return s:compile(s:parse(a:expr))
    endfunction

  End

  Describe .compile_ternary
    It compile ternary
      Assert Equals(Recompile('cond ? true : false'), '(cond ? true : false)')
    End

    It compile nested ternary
      Assert Equals(Recompile('cond ? true : (cond2 ? true2 : false2)'), '(cond ? true : (cond2 ? true2 : false2))')
    End
  End

  Describe .compile_or
    It compile or
      Assert Equals(Recompile('true || false'), '(true || false)')
    End

    It eval or expression
      Assert Equals(eval(Recompile('0 || 0')), 0)
      Assert Equals(eval(Recompile('0 || 1')), 1)
      Assert Equals(eval(Recompile('1 || 0')), 1)
      Assert Equals(eval(Recompile('1 || 1')), 1)
    End
  End

  Describe .compile_and
    It compile and
      Assert Equals(Recompile('true && false'), '(true && false)')
    End

    It eval and expression
      Assert Equals(eval(Recompile('0 && 0')), 0)
      Assert Equals(eval(Recompile('0 && 1')), 0)
      Assert Equals(eval(Recompile('1 && 0')), 0)
      Assert Equals(eval(Recompile('1 && 1')), 1)
    End
  End

  Describe .compile_equal
    It compile equal
      Assert Equals(Recompile('true == false'), '(true == false)')
    End

    It eval equal expression
      Assert Equals(eval(Recompile('0 == 0')), 1)
      Assert Equals(eval(Recompile('0 == 1')), 0)
      Assert Equals(eval(Recompile('1 == 0')), 0)
      Assert Equals(eval(Recompile('1 == 1')), 1)
    End
  End

  Describe .compile_equalci
    It compile equal
      Assert Equals(Recompile('true ==? false'), '(true ==? false)')
    End

    It eval equal expression
      Assert Equals(eval(Recompile('0 ==? 0')), 1)
      Assert Equals(eval(Recompile('0 ==? 1')), 0)
      Assert Equals(eval(Recompile('1 ==? 0')), 0)
      Assert Equals(eval(Recompile('1 ==? 1')), 1)
    End
  End

  Describe .compile_equalcs
    It compile equal
      Assert Equals(Recompile('true ==# false'), '(true ==# false)')
    End

    It eval equal expression
      Assert Equals(eval(Recompile('0 ==# 0')), 1)
      Assert Equals(eval(Recompile('0 ==# 1')), 0)
      Assert Equals(eval(Recompile('1 ==# 0')), 0)
      Assert Equals(eval(Recompile('1 ==# 1')), 1)
    End
  End

  Describe .compile_nequal
    It compile nequal
      Assert Equals(Recompile('true != false'), '(true != false)')
    End
  End

  Describe .compile_nequalci
    It compile nequalci
      Assert Equals(Recompile('true !=? false'), '(true !=? false)')
    End
  End

  Describe .compile_nequalcs
    It compile nequalcs
      Assert Equals(Recompile('true !=# false'), '(true !=# false)')
    End
  End

  Describe .compile_greater
    It compile greater
      Assert Equals(Recompile('true > false'), '(true > false)')
    End
  End

  Describe .compile_greaterci
    It compile greaterci
      Assert Equals(Recompile('true >? false'), '(true >? false)')
    End
  End

  Describe .compile_greatercs
    It compile greatercs
      Assert Equals(Recompile('true ># false'), '(true ># false)')
    End
  End

  Describe .compile_gequal
    It compile gequal
      Assert Equals(Recompile('true >= false'), '(true >= false)')
    End
  End

  Describe .compile_gequalci
    It compile gequalci
      Assert Equals(Recompile('true >=? false'), '(true >=? false)')
    End
  End

  Describe .compile_gequalcs
    It compile gequalcs
      Assert Equals(Recompile('true >=# false'), '(true >=# false)')
    End
  End

  Describe .compile_smaller
    It compile smaller
      Assert Equals(Recompile('true < false'), '(true < false)')
    End
  End

  Describe .compile_smallerci
    It compile smallerci
      Assert Equals(Recompile('true <? false'), '(true <? false)')
    End
  End

  Describe .compile_smallercs
    It compile smallercs
      Assert Equals(Recompile('true <# false'), '(true <# false)')
    End
  End

  Describe .compile_sequal
    It compile sequal
      Assert Equals(Recompile('true <= false'), '(true <= false)')
    End
  End

  Describe .compile_sequalci
    It compile sequalci
      Assert Equals(Recompile('true <=? false'), '(true <=? false)')
    End
  End

  Describe .compile_sequalcs
    It compile sequalcs
      Assert Equals(Recompile('true <=# false'), '(true <=# false)')
    End
  End

  Describe .compile_match
    It compile match
      Assert Equals(Recompile('true =~ false'), '(true =~ false)')
    End
  End

  Describe .compile_matchci
    It compile matchci
      Assert Equals(Recompile('true =~? false'), '(true =~? false)')
    End
  End

  Describe .compile_matchcs
    It compile matchcs
      Assert Equals(Recompile('true =~# false'), '(true =~# false)')
    End
  End

  Describe .compile_nomatch
    It compile nomatch
      Assert Equals(Recompile('true !~ false'), '(true !~ false)')
    End
  End

  Describe .compile_nomatchci
    It compile nomatchci
      Assert Equals(Recompile('true !~? false'), '(true !~? false)')
    End
  End

  Describe .compile_nomatchcs
    It compile nomatchcs
      Assert Equals(Recompile('true !~# false'), '(true !~# false)')
    End
  End

  Describe .compile_is
    It compile is
      Assert Equals(Recompile('true is false'), '(true is false)')
    End
  End

  Describe .compile_isci
    It compile is
      Assert Equals(Recompile('true is? false'), '(true is? false)')
    End
  End

  Describe .compile_iscs
    It compile is
      Assert Equals(Recompile('true is# false'), '(true is# false)')
    End
  End

  Describe .compile_isnot
    It compile isnot
      Assert Equals(Recompile('true isnot false'), '(true isnot false)')
    End
  End

  Describe .compile_isnotci
    It compile isnotci
      Assert Equals(Recompile('true isnot? false'), '(true isnot? false)')
    End
  End

  Describe .compile_isnotcs
    It compile isnotcs
      Assert Equals(Recompile('true isnot# false'), '(true isnot# false)')
    End
  End

  Describe .compile_add
    It compile +
      Assert Equals(Recompile('1 + 1'), '(1 + 1)')
      Assert Equals(eval(Recompile('1 + 1')), 2)
    End
  End

  Describe .compile_subtract
    It compile -
      Assert Equals(Recompile('1 - 1'), '(1 - 1)')
      Assert Equals(eval(Recompile('1 - 1')), 0)
    End
  End

  Describe .compile_concat
    It compile . (concat)
      Assert Equals(Recompile('1 . 1'), '(1 . 1)')
      Assert Equals(eval(Recompile('1 . 1')), '11')
    End
  End

  Describe .compile_multiply
    It compile *
      Assert Equals(Recompile('1 * 1'), '(1 * 1)')
      Assert Equals(eval(Recompile('1 * 1')), 1)
    End
  End

  Describe .compile_divide
    It compile /
      Assert Equals(Recompile('1 / 1'), '(1 / 1)')
      Assert Equals(eval(Recompile('1 / 1')), 1)
    End
  End

  Describe .compile_reminder
    It compile %
      Assert Equals(Recompile('1 % 1'), '(1 % 1)')
      Assert Equals(eval(Recompile('1 % 1')), 0)
    End
  End

  Describe .compile_number
    It compile number
      for i in range(0, 100)
        Assert Equals(Recompile(string(i)), string(i))
      endfor
    End
  End

End
